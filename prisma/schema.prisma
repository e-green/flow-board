// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement()) // Auto-incrementing integer ID
  email              String   @unique
  name               String
  password           String
  verification_token String?
  verified           Boolean  @default(false)
  createdAt          DateTime @default(now())
  token_expiration   DateTime?
  reset_token        String?  // Field to store the reset token
  reset_token_expiry DateTime? // Field to store the token expiration time
  tasks              Task[]   // Relation to tasks
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  subTasks    SubTask[]
  coverImage  String?   // New field for cover image URL
  logo        String?   // New field for logo image URL
}


model SubTask {
  id          Int       @id @default(autoincrement())
  title       String
  description String?    // New field for description
  status      String     @default("Not Started") // New field for status
  images      String[]   // New field for storing image URLs
  documents   String[]   // New field for storing document URLs
  taskId      Int       // Foreign key for main Task
  parentId    Int?      // Optional parent ID for nested subtasks
  task        Task      @relation(fields: [taskId], references: [id])
  parent      SubTask?  @relation("SubtaskParent", fields: [parentId], references: [id])
  children    SubTask[] @relation("SubtaskParent")

  createdAt   DateTime  @default(now())
}

